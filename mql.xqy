xquery version "1.0" encoding "UTF-8";

(: This file was generated on Wed Jul 31, 2013 22:33 (UTC-04) by REx v5.25 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net> :)
(: REx command line: mql.ebnf -backtrack -xquery -tree :)

(:~
 : The parser that was generated for the mql grammar.
 :)
module namespace p="mql";
declare default function namespace "http://www.w3.org/2005/xpath-functions";

(:~
 : The index of the parser state for accessing the combined
 : (i.e. level > 1) lookahead code.
 :)
declare variable $p:lk := 1;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the token that has been shifted.
 :)
declare variable $p:b0 := 2;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the token that has been shifted.
 :)
declare variable $p:e0 := 3;

(:~
 : The index of the parser state for accessing the code of the
 : level-1-lookahead token.
 :)
declare variable $p:l1 := 4;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-1-lookahead token.
 :)
declare variable $p:b1 := 5;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-1-lookahead token.
 :)
declare variable $p:e1 := 6;

(:~
 : The index of the parser state for accessing the code of the
 : level-2-lookahead token.
 :)
declare variable $p:l2 := 7;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-2-lookahead token.
 :)
declare variable $p:b2 := 8;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-2-lookahead token.
 :)
declare variable $p:e2 := 9;

(:~
 : The index of the parser state for accessing the code of the
 : level-3-lookahead token.
 :)
declare variable $p:l3 := 10;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the begin of the level-3-lookahead token.
 :)
declare variable $p:b3 := 11;

(:~
 : The index of the parser state for accessing the position in the
 : input string of the end of the level-3-lookahead token.
 :)
declare variable $p:e3 := 12;

(:~
 : The index of the parser state for accessing the token code that
 : was expected when an error was found.
 :)
declare variable $p:error := 13;

(:~
 : The index of the parser state for accessing the memoization
 : of backtracking results.
 :)
declare variable $p:memo := 14;

(:~
 : The index of the parser state that points to the first entry
 : used for collecting action results.
 :)
declare variable $p:result := 15;

(:~
 : The codepoint to charclass mapping for 7 bit codepoints.
 :)
declare variable $p:MAP0 as xs:integer+ :=
(
  59, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 2, 2, 2,
  2, 4, 5, 2, 6, 7, 8, 9, 2, 10, 11, 12, 13, 14, 15, 16, 16, 17, 16, 18, 2, 2, 19, 2, 2, 2, 20, 20, 21, 20, 22, 20, 23,
  20, 24, 20, 20, 25, 26, 27, 28, 29, 20, 30, 31, 32, 33, 20, 20, 20, 34, 35, 2, 2, 2, 2, 2, 2, 36, 37, 38, 39, 40, 41,
  42, 43, 44, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 20, 2, 2, 2, 2, 2
);

(:~
 : The codepoint to charclass mapping for codepoints below the surrogate block.
 :)
declare variable $p:MAP1 as xs:integer+ :=
(
  54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
  58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 90, 122, 153, 212,
  180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
  180, 180, 180, 180, 180, 180, 180, 180, 180, 59, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 2, 2, 2, 2, 4, 5, 2, 6, 7, 8, 9, 2, 10, 11, 12, 13, 14, 15, 16, 16, 17, 16, 18, 2,
  2, 19, 2, 2, 20, 20, 21, 20, 22, 20, 23, 20, 24, 20, 20, 25, 26, 27, 28, 29, 20, 30, 31, 32, 33, 20, 20, 20, 34, 35,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 36, 37, 38, 39, 40,
  41, 42, 43, 44, 20, 20, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 20, 2, 2, 2, 2, 2
);

(:~
 : The codepoint to charclass mapping for codepoints above the surrogate block.
 :)
declare variable $p:MAP2 as xs:integer+ :=
(
  55296, 1114111, 2
);

(:~
 : The token-set-id to DFA-initial-state mapping.
 :)
declare variable $p:INITIAL as xs:integer+ :=
(
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
  33, 34, 35, 36, 37
);

(:~
 : The DFA transition table.
 :)
declare variable $p:TRANSITION as xs:integer+ :=
(
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 1920, 1920, 1930, 2019, 2019, 1955,
  2019, 2073, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 5193, 2019, 2019, 5196, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 1976, 3514, 1997, 2019, 2019, 2322, 2019, 2018, 2019, 2019, 2019, 5583, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2036, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2480, 2478, 2069, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 5468,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2089, 3896, 5193, 2019, 2019, 5196, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 1939, 1938, 2110, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 4630, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2089, 3896, 5193, 2019, 2019, 5196, 2019, 2019, 2019, 2019,
  2019, 5022, 2019, 2019, 2019, 2019, 3799, 2019, 2019, 5411, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2049, 3231, 3264, 2019, 2130, 2146, 2043, 2168, 2019, 2192, 2176, 2043, 2172, 1979, 2175, 1981,
  2206, 2199, 2797, 4373, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2225, 3108, 4290,
  2019, 2262, 2285, 4567, 2307, 2019, 2344, 4754, 3547, 2759, 2556, 2762, 4409, 4220, 4417, 2381, 4153, 2397, 2434,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2225, 3108, 4290, 2019, 2262, 2285, 4567, 2307, 2019,
  2344, 4754, 3547, 2759, 4906, 2762, 4409, 4220, 4417, 2381, 4153, 2397, 2434, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2225, 3108, 4290, 2019, 2262, 2285, 4567, 2307, 2019, 2344, 4754, 3547, 2759, 5436, 2762,
  4409, 4220, 4417, 2456, 5050, 2397, 2434, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2225, 3108,
  4290, 2019, 2262, 2285, 4567, 2307, 2019, 2344, 4754, 3547, 2759, 5436, 2762, 5518, 4220, 4417, 2496, 3159, 2397,
  2434, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2225, 3108, 4290, 2019, 2262, 2285, 4567, 2307,
  2019, 2344, 4678, 3547, 2759, 5436, 2762, 5518, 4220, 4417, 5418, 3159, 2534, 2434, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2225, 3108, 4290, 2019, 2262, 2285, 4567, 2307, 2019, 2344, 4754, 3547, 2759, 5436,
  2762, 5518, 4220, 4417, 5418, 3159, 2534, 2434, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2225,
  3108, 4290, 2019, 2262, 2285, 4567, 2307, 2019, 2344, 4754, 3547, 2759, 5436, 2762, 5518, 4220, 4417, 5418, 3159,
  2572, 2412, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2225, 3108, 4290, 2019, 2262, 2285, 4567,
  2307, 2615, 2344, 4754, 3547, 2759, 5436, 2762, 5518, 4220, 4417, 5418, 3159, 2572, 2412, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2961, 2634, 2019, 2966, 2019, 3036, 2974, 2019, 2970,
  2663, 2973, 2665, 2660, 2653, 3334, 2240, 3675, 2681, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  4091, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 2733,
  2019, 2755, 2019, 3569, 2763, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 2511, 2733, 2019, 2755, 2019, 3569, 2763, 2683,
  2759, 5436, 2762, 5438, 4220, 4417, 2843, 3159, 2895, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2699, 2019, 3828, 2733, 2019, 2755, 2019, 2779, 2763, 2637, 2759, 5436, 2762, 5438, 4220, 4417,
  5176, 3159, 2813, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2834, 2019, 2877,
  2733, 4344, 2755, 2019, 3569, 2763, 2053, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 2920, 3165, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 2942, 2733, 2209, 2755, 2019, 3569, 2763,
  4379, 2759, 5436, 2762, 2904, 4220, 2990, 4035, 3159, 3011, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2020, 3027, 2019, 3052, 2733, 2114, 2755, 2019, 3569, 2763, 2683, 2759, 2291, 2762, 5438, 4220,
  3078, 4035, 5566, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 3586, 3099, 2019,
  4316, 2733, 2019, 2755, 2019, 3707, 2763, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 2733, 2739, 2755, 2019, 4743,
  2763, 2683, 2759, 5436, 2762, 3992, 4220, 3124, 3147, 2599, 4083, 3181, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2699, 2019, 4667, 2733, 5083, 2755, 2618, 3569, 2763, 2683, 2759, 2094, 2762, 3458,
  4220, 4417, 4035, 3202, 2019, 3228, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 4464, 3247,
  2019, 3280, 2733, 2019, 2755, 2019, 3569, 2763, 2683, 2759, 4760, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 2733, 2019, 2755, 2019,
  3569, 2763, 2683, 2759, 5436, 2762, 3781, 4220, 4417, 4035, 3397, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 3314, 2733, 2440, 2755, 2019, 3569, 2763, 2926, 2759, 5436, 2762,
  5438, 4220, 4417, 4035, 3350, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2699, 2019, 3372, 2733, 2019, 2755, 2019, 5256, 2763, 4943, 2759, 3356, 2762, 5438, 4220, 4417, 4035, 3413, 3186,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 3438, 2733, 2019, 2755,
  2019, 3569, 2763, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 2733, 2019, 2755, 2019, 2365, 2763, 2683, 2759, 5436,
  2762, 5438, 4220, 3474, 3921, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2699, 2019, 4316, 2733, 2019, 2755, 2019, 3569, 2763, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159,
  2019, 4118, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 3497, 2587, 4316, 2733, 2019,
  3530, 5299, 3569, 3083, 3563, 2269, 5436, 5131, 5438, 4198, 4989, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 3585, 3602, 2019, 4316, 2733, 2019, 2755, 2019, 3569, 2763, 2683, 2759,
  5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2418, 3635, 3698, 2019, 4316, 3723, 2019, 3748, 2708, 3569, 2763, 5112, 5269, 5225, 2762, 5438, 4220, 4417, 4035,
  3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 3772, 2019, 4316, 2733,
  3797, 3815, 2019, 3569, 2790, 3852, 3836, 5436, 4779, 5438, 3874, 4264, 5306, 3159, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2328, 3893, 3912, 3937, 4447, 3986, 2019, 2755, 4058, 4014, 3385, 4008,
  5504, 4030, 4051, 5438, 3131, 5385, 4125, 3159, 4202, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 4074, 2019, 4316, 4107, 2019, 2755, 2019, 3569, 2763, 2683, 2759, 5436, 2762, 5438, 4220, 4417,
  4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 4141, 4169, 2019, 4316,
  2733, 2019, 2755, 2019, 4185, 4218, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 2733, 2019, 2755, 2019, 3569, 5273,
  3732, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 4861, 3619, 2699, 4636, 4714, 2733, 3506, 2755, 4236, 3569, 2763, 2717, 2518, 5436, 2952, 4256, 2852,
  4280, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 5474, 4306, 2019,
  4316, 2733, 4339, 4360, 4395, 4883, 2995, 2683, 2759, 5436, 2762, 5438, 3481, 4417, 3682, 3159, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 3650, 4437, 2019, 4316, 2733, 2019, 2755, 2019, 3569,
  2763, 2683, 3292, 2861, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 4463, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 3963, 4480, 4521, 4505, 4547, 5015, 2755, 2019, 3970, 3756, 2683, 2759, 5436, 3062, 5361,
  4220, 5526, 4035, 2549, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 4688, 4583,
  4619, 4805, 4652, 4704, 4730, 2019, 3569, 2763, 2683, 4776, 5436, 2762, 1960, 3298, 4417, 5343, 3159, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 4841, 4795, 2019, 4316, 2733, 2019, 2755, 2019,
  3569, 4821, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2699, 4857, 4316, 2733, 2019, 2755, 2019, 3569, 2763, 4877, 2759, 5436, 2762,
  5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2699, 3422, 4531, 4899, 2019, 4922, 2152, 3569, 4938, 4959, 2886, 5436, 3451, 4981, 5162, 4495, 4035, 3159, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 5005, 2019, 2755,
  3611, 4965, 2763, 2683, 4323, 5436, 4421, 5438, 5185, 4417, 5038, 5554, 5336, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 4240, 4316, 5066, 5082, 5099, 4596, 3569, 2763, 2683, 5128, 5147,
  5212, 2818, 5241, 3952, 4035, 3159, 4603, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  3212, 5289, 2019, 4316, 5322, 2019, 2755, 2002, 3858, 2355, 2683, 2759, 5359, 2762, 5377, 4220, 4417, 4035, 3159,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 3256, 5401, 2019, 4316, 2733, 2019,
  2755, 2019, 3569, 2763, 2683, 2759, 5436, 2762, 5438, 3327, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 3877, 2246, 2699, 5434, 4316, 2733, 2019, 2755, 4836, 3569, 2763, 2683, 2759,
  5436, 2762, 5438, 4220, 4417, 4035, 3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 5454, 2019, 4316, 2733, 4560, 2755, 2019, 5490, 2763, 2683, 2759, 5436, 2762, 5438, 4220, 4417, 4035,
  3159, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2699, 2019, 4316, 2733,
  2019, 2755, 2019, 3569, 2763, 2683, 2759, 5436, 2762, 5438, 3540, 3665, 5542, 3159, 5582, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2471, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
  2019, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 0, 85, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 7680, 0, 0, 0, 0, 0, 0, 7680, 0, 0, 0, 126, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 278, 72, 72,
  0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 114, 0, 71, 0, 71, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 180, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 39, 0, 0, 0, 0, 0, 6656, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 0, 192, 0, 0, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 126, 0, 0, 0, 0, 0, 42, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 251, 0, 72, 72, 0, 0, 0, 7680, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 149, 151, 0, 43, 43, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 114, 114, 114, 114, 0, 114, 114, 0,
  0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 154, 0, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
  114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 114, 114, 114, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 40, 0, 42, 4140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5632, 0, 0, 0, 0, 0, 2560, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 61, 0, 4161, 4202, 0, 0, 0, 0, 0, 72, 72, 72, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0,
  0, 237, 0, 72, 72, 84, 2175, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 72, 72, 113, 0, 72, 72, 72, 72, 72, 72,
  72, 72, 72, 72, 72, 166, 2175, 0, 0, 0, 0, 0, 3072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 4282, 0, 0,
  0, 0, 0, 0, 0, 155, 72, 72, 72, 72, 72, 0, 0, 203, 204, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 192, 155, 72, 72, 72, 72, 72,
  0, 0, 0, 303, 0, 0, 0, 0, 0, 72, 72, 72, 0, 0, 5432, 5432, 0, 327, 327, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 338, 0, 0,
  0, 0, 0, 4951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 4951, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 10752, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 72, 72, 72, 0, 0, 5432, 0, 0, 0, 0, 0, 6144, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 7168, 0, 0, 0, 0, 0, 0, 0, 7168, 0, 0, 0, 304, 0, 0, 0, 0, 0, 72, 72, 72, 0, 0, 5432, 0, 0, 0, 0, 0, 8704,
  113, 72, 72, 72, 72, 72, 72, 72, 72, 72, 231, 0, 0, 234, 0, 236, 0, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 338,
  0, 0, 0, 0, 0, 20040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 72, 72, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 338, 0, 0, 0, 0, 0, 30304, 0, 0, 0, 100, 0, 102, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 13312, 0, 0, 0, 170, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 182, 183, 0, 2560, 2560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 192, 0,
  0, 0, 0, 2560, 2560, 2560, 2560, 2560, 2560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2560, 2560, 2560, 2560, 0, 340,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 72, 0, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
  0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 192, 0, 72, 72, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 113,
  155, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0, 0, 0, 0, 192,
  155, 72, 72, 72, 72, 72, 0, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114, 114, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 277, 72, 72, 72, 70, 72, 0, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 309, 72, 72, 72, 0, 0,
  0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0, 0, 245, 0, 0, 0, 0, 0, 72, 72, 0, 0, 0, 0, 13824, 0, 113, 72, 72, 72, 72, 72, 72,
  72, 72, 72, 229, 72, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 72, 72, 72, 72, 9728, 0, 0,
  314, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 219, 0, 0, 0, 0, 192, 0, 0, 107, 0, 0, 0, 113, 72, 72, 72, 72, 72, 72, 72,
  72, 72, 0, 261, 262, 0, 0, 0, 0, 0, 0, 0, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 295, 0, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 24064, 0, 0, 0, 0, 0, 328, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 339, 67, 72, 0, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 2560, 0, 2560, 2560, 2560,
  2560, 2560, 2560, 0, 0, 0, 108, 0, 0, 113, 72, 72, 72, 72, 72, 72, 72, 72, 72, 260, 0, 0, 0, 16896, 264, 0, 0, 0, 0,
  0, 0, 296, 0, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 68, 72, 0, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0,
  0, 0, 0, 0, 5632, 5632, 0, 0, 0, 4162, 4162, 0, 0, 294, 0, 0, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 287, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 305, 0, 307, 0, 0, 72, 72, 72, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0,
  0, 0, 0, 0, 0, 0, 9216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 315, 72, 0, 0, 0, 319, 0, 0, 0,
  0, 0, 0, 57, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43, 0, 69, 72, 0, 72,
  72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 86, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11373, 0, 0, 113,
  72, 72, 72, 72, 72, 72, 72, 72, 72, 226, 227, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 10240, 0, 0,
  0, 113, 72, 72, 72, 72, 72, 72, 72, 72, 72, 0, 284, 285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2560, 2560, 2560, 0, 0, 0, 0,
  0, 313, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 252, 72, 72, 0, 0, 0, 0, 15360, 0, 113, 72, 72, 72, 72,
  72, 72, 72, 72, 72, 200, 72, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0, 0, 0, 12800, 0,
  0, 72, 0, 317, 318, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 110, 0, 0, 113, 72, 72, 72, 72, 72,
  72, 72, 72, 72, 257, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 275, 0, 0, 72, 72, 72, 72, 0, 0, 0, 297, 72, 72, 72, 72,
  72, 72, 0, 0, 0, 0, 0, 0, 33792, 0, 0, 0, 0, 0, 0, 0, 73, 0, 73, 73, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0, 0,
  0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 41, 41, 0, 113, 155, 72, 72, 72, 72, 72, 161, 162, 72, 72, 72, 72, 0, 0, 0, 28672, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 4282, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 155, 72, 72, 72,
  72, 72, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 74, 50, 74, 74, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 175,
  0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 59, 0, 0, 0, 0, 54, 0, 0,
  0, 0, 0, 60, 0, 0, 0, 60, 0, 0, 0, 0, 72, 72, 72, 72, 36936, 72, 0, 0, 0, 0, 0, 0, 331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
  72, 72, 0, 27136, 0, 0, 0, 75, 51, 75, 75, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 191, 0, 192, 155, 72, 72, 72, 72, 72, 0,
  72, 72, 0, 0, 86, 0, 129, 130, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 192, 113, 155, 72, 72, 72, 72, 22688,
  72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0, 76, 0, 76, 76, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 273, 0,
  0, 0, 276, 72, 72, 72, 72, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 113, 155, 16028, 72, 72, 72, 72,
  72, 72, 72, 72, 164, 72, 0, 0, 0, 0, 0, 112, 113, 72, 72, 72, 72, 72, 72, 72, 72, 72, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 155, 72, 72, 72, 72, 197, 72, 35400, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 48, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 65, 0, 0, 72, 52, 72, 72, 0, 0, 0, 86, 0, 0,
  0, 0, 0, 0, 0, 308, 0, 72, 72, 72, 0, 0, 0, 0, 0, 92, 0, 0, 95, 0, 32256, 0, 0, 0, 0, 0, 104, 26112, 29184, 0, 0, 0,
  0, 72, 72, 23112, 25672, 72, 72, 301, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 155, 193, 72, 72, 72, 72,
  26207, 72, 72, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14848, 0, 72, 72, 72, 72, 0, 0, 0, 38912, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 192, 155, 72, 72, 72, 196, 72, 238, 0, 240, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 72, 0, 0, 0, 0, 72,
  255, 256, 72, 258, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 178, 0, 0, 0, 0, 0, 0, 77, 0, 77, 77, 0, 0, 0, 86, 0, 0, 0,
  0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8192, 0, 0, 0, 0, 0, 0, 0, 72, 72, 0, 0, 86, 0, 0, 0, 0, 132, 0, 0, 0, 0,
  0, 0, 4608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 72, 311, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
  72, 0, 0, 0, 0, 0, 0, 322, 0, 0, 0, 0, 72, 81, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 90, 184, 0, 0, 0, 0, 0, 0, 0, 0,
  192, 155, 72, 72, 72, 72, 72, 283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0, 25286, 72, 72, 72, 72, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27648, 29696, 0, 0, 268, 0, 0, 271,
  0, 0, 0, 0, 0, 0, 0, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 37888, 0, 0, 0, 0, 0, 298, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0,
  0, 84, 40, 86, 42, 3627, 4140, 0, 0, 0, 0, 0, 72, 63, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 113, 72, 72, 72, 72,
  72, 72, 72, 72, 72, 0, 232, 233, 0, 0, 0, 0, 0, 0, 0, 38541, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11776, 0, 0, 0,
  113, 155, 72, 72, 158, 72, 72, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
  0, 192, 168, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 272, 272, 0, 0, 0, 0, 0, 72, 72, 72, 72, 72,
  72, 0, 0, 0, 0, 0, 0, 0, 30720, 0, 0, 0, 72, 54, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 113, 72, 72, 72, 72, 72,
  72, 121, 72, 72, 20992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 78, 55, 78, 78, 0, 0, 0, 86, 0, 0, 0, 0,
  0, 89, 0, 0, 0, 0, 72, 299, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 113, 72, 115, 72, 72, 72, 72, 72, 72, 72, 91, 0, 18432,
  0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 113, 72, 72, 72, 72, 72, 120, 34376, 34888, 123, 0, 72, 125, 0, 0, 86, 0, 0,
  0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4243, 0, 0, 0, 0, 0, 0, 0, 79, 0, 79, 82, 0, 0, 0,
  86, 0, 0, 0, 87, 0, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 97, 0, 0,
  0, 101, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 72, 72, 0, 0, 86, 128, 0, 0, 0, 0, 0,
  0, 0, 26760, 0, 0, 0, 0, 111, 0, 113, 72, 72, 72, 72, 72, 72, 72, 72, 72, 166, 0, 0, 0, 39936, 0, 0, 0, 0, 0, 0, 56,
  0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 113, 72, 72, 72, 72, 118, 72, 72, 72,
  72, 113, 155, 72, 157, 72, 72, 72, 72, 72, 72, 163, 72, 165, 0, 0, 0, 0, 0, 189, 0, 0, 0, 192, 155, 72, 72, 72, 72,
  72, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 72, 72, 223, 72, 72, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 35328, 0, 80, 0, 80, 80, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 113, 72, 72, 116, 117, 119, 72, 122, 72, 72, 72, 72,
  36551, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35904, 0, 0, 0, 0,
  0, 0, 23646, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 49, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
  155, 72, 72, 19139, 72, 72, 0, 34940, 72, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 0, 0, 0, 0, 72, 72, 113, 155,
  72, 72, 72, 21663, 72, 72, 72, 72, 72, 72, 72, 0, 0, 167, 72, 32840, 72, 72, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  14336, 0, 0, 192, 0, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 155, 72, 194, 72, 72, 72, 267, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 72, 72, 72, 72, 72, 72, 0, 0, 0, 302, 0, 0, 0, 72, 72, 0, 0, 86, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 144,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 31232, 31744, 0, 0, 0, 0, 0, 0, 0, 72, 72, 72, 0, 0, 0, 0, 0, 72, 0,
  0, 0, 0, 0, 0, 323, 0, 0, 0, 27648, 72, 72, 0, 0, 86, 0, 0, 0, 0, 0, 133, 0, 0, 0, 137, 138, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 152, 113, 155, 72, 72, 72, 72, 72, 72, 72, 33352, 72, 72, 72, 0, 0, 0, 0, 0, 214, 215, 0, 0, 0,
  0, 0, 0, 0, 0, 192, 72, 17480, 72, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 242, 0, 0,
  39424, 0, 0, 0, 0, 0, 0, 16456, 72, 72, 282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 289, 290, 0, 0, 0, 0, 0, 306, 0, 0, 0, 72, 72,
  72, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 72, 72, 72, 72, 72, 0, 0, 0,
  263, 0, 0, 265, 0, 0, 0, 0, 0, 243, 244, 0, 0, 0, 0, 0, 0, 0, 72, 253, 281, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  291, 0, 0, 0, 0, 188, 0, 0, 0, 0, 192, 155, 72, 72, 72, 72, 72, 225, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  209, 0, 72, 0, 72, 83, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 37960, 0, 0, 0, 0, 0,
  72, 72, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 72, 72, 0, 0, 0, 0,
  0, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 279, 280, 0, 0, 269, 270, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 72, 72,
  72, 300, 0, 24576, 28160, 0, 0, 0, 0, 72, 58, 72, 72, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 72, 72, 72, 0, 0, 5432, 0, 0, 17920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 72, 72, 0, 72, 0, 72, 72, 0,
  0, 0, 86, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 1536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
  0, 0, 192, 155, 72, 72, 72, 72, 72, 224, 72, 72, 72, 228, 72, 72, 0, 0, 0, 0, 235, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0,
  0, 72, 72, 72, 72, 72, 72, 0, 0, 0, 0, 0, 19456, 0, 0, 37376, 0, 0, 0, 0, 0, 0, 72, 22088, 72, 0, 0, 0, 0, 0, 72, 0,
  0, 0, 0, 0, 321, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 320, 0, 0, 0, 0, 325, 326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 153
);

(:~
 : The DFA-state to expected-token-set mapping.
 :)
declare variable $p:EXPECTED as xs:integer+ :=
(
  258, 262, 266, 270, 268, 268, 274, 290, 294, 298, 309, 353, 353, 353, 353, 353, 317, 321, 325, 349, 280, 301, 353,
  353, 353, 353, 427, 330, 323, 349, 349, 365, 353, 353, 353, 353, 426, 377, 326, 349, 349, 282, 353, 353, 353, 353,
  394, 378, 348, 349, 352, 353, 353, 353, 374, 346, 349, 351, 353, 353, 353, 476, 344, 349, 350, 353, 353, 474, 338,
  349, 351, 353, 474, 358, 362, 475, 358, 382, 387, 386, 384, 341, 341, 333, 334, 391, 353, 353, 496, 512, 516, 420,
  398, 523, 407, 353, 438, 411, 515, 419, 368, 424, 353, 353, 286, 431, 353, 496, 413, 435, 451, 483, 353, 353, 284,
  447, 353, 495, 412, 312, 353, 482, 353, 353, 442, 456, 450, 496, 413, 313, 451, 483, 353, 353, 460, 464, 497, 415,
  451, 483, 353, 466, 463, 496, 414, 437, 482, 353, 465, 462, 495, 470, 452, 484, 465, 462, 496, 480, 484, 353, 489,
  473, 353, 493, 439, 438, 353, 441, 441, 494, 353, 353, 353, 353, 403, 353, 442, 501, 509, 505, 520, 353, 353, 401,
  353, 529, 503, 440, 353, 353, 485, 538, 544, 403, 353, 443, 531, 534, 353, 353, 353, 354, 542, 353, 402, 442, 548,
  533, 353, 353, 353, 353, 542, 403, 353, 443, 549, 534, 353, 353, 353, 305, 353, 442, 543, 534, 353, 353, 304, 353,
  353, 277, 439, 353, 353, 303, 544, 442, 544, 441, 353, 525, 353, 544, 441, 353, 371, 353, 353, 353, 353, 353, 353,
  353, 353, 353, 353, 353, 6, 10, 34, 66, 130, 2050, 4098, 8194, 16386, 32770, 2, 2, 2, 2, 1026, 24578, 1058, 25602, 2,
  2, 16, 512, 0, 16, 16, 4, 0, 0, 2, 80, 7680, 196608, 2, 994, 994, 1073479682, 1073676290, -1073741806, 2, -1073717230,
  -1073741806, 2, 4, 8, 32, 0, 0, 128, 16, 512, 0, 32, 64, 64, 128, 16384, 1048576, 134217728, 0, 192, 960, 786432,
  66060288, 1006632960, 196608, 16, 16, -1073741808, 16, 16, 16, -2147483632, 4194304, 58720256, 402653184, 131072, 0,
  256, 131072, 256, 262144, 8388608, 50331648, 131072, 0, 256, 8388608, 50331648, 268435456, 131072, -2147483632, 16,
  16, 16, 16, 0, 0, 0, 0, 1, 262144, 8388608, 16777216, 33554432, 131072, 16, 16, 16, 4, 8, 0, 32, 805306368, 0, 512, 0,
  0, 768, 262144, 58720256, 134217728, 268435456, 131072, 16, 131072, 16, 0, 256, 256, 8388608, 33554432, 131072, 0,
  131072, 256, 256, 0, 960, 262144, 58720256, 0, 805306400, 52690944, 0, 8192, 0, 0, 0, 8192, -2147279278, 1329356941,
  -2147279278, -2147279278, 32768, 4194304, 0, 8388608, 1, 128, 1048576, 134217728, 201326592, 1073741824, 0, 0,
  8388608, 2359296, 50331648, 0, 0, 960, 262144, 1048576, -2147483648, 0, 0, 3932160, 16384, 1572864, 134217728, 0, 0,
  0, 256, 0, 0, 0, 2, 16, 1536, 6144, 196608, -2147483648, 0, 0, 0, 32, 268435456, 80, 1024, 4096, 196608, 2, 64, 1024,
  4096, 131072, 0, 0, 0, 64, 1024, 4194304, 8388608, 128, 1048576, 0, 0, 0, 768, 768, 262144, 1048576, 0, 32, 268435456,
  536870912, 0, 0, 0, 5, 64, 1024, 0, 256, 64, 256, 0, 0, 256, 32768, 4194304, 8388608, 528, 3072, 0, 0, 4096, 0, 0,
  205, 4096, 0, 816, 0, 8388608, 0, 5, 136, 24576, 1572864, 201326592, 3074, 205, 733, 0, 805306400, 0, 0, 128, 512, 2,
  16, 512, 3072, 0, 0, 4096, 256, 0, 8, 192, 0, 24, 192, 16, 512, 0, 0, 0, 16, 512, 2048, 0, 0
);

(:~
 : The token-string table.
 :)
declare variable $p:TOKEN as xs:string+ :=
(
  "(0)",
  "SP",
  "polygonValue",
  "pointValue",
  "inExpr",
  "stringValue",
  "floatValue",
  "intValue",
  "dateTimeValue",
  "dateValue",
  "DIGIT",
  "EOF",
  "'('",
  "')'",
  "','",
  "'='",
  "'GC'",
  "'GEOMETRYCOLLECTION'",
  "'LINESTRING'",
  "'LS'",
  "'MLS'",
  "'MP'",
  "'MPG'",
  "'MULTILINESTRING'",
  "'MULTIPOINT'",
  "'MULTIPOLYGON'",
  "'PG'",
  "'POINT'",
  "'POLYGON'",
  "'PT'",
  "'and'",
  "'andnot'",
  "'between'",
  "'boost'",
  "'bw'",
  "'cn'",
  "'coll'",
  "'collation'",
  "'collection'",
  "'contains'",
  "'coordinate-system'",
  "'dir'",
  "'directory'",
  "'doc'",
  "'document'",
  "'eq'",
  "'equal'",
  "'exclusive'",
  "'frag'",
  "'fragment'",
  "'ge'",
  "'geo'",
  "'geospatial'",
  "'gt'",
  "'inclusive'",
  "'infinity'",
  "'le'",
  "'lt'",
  "'ma'",
  "'matches'",
  "'maxOccurs'",
  "'minOccurs'",
  "'ne'",
  "'near'",
  "'not'",
  "'notequal'",
  "'nr'",
  "'or'",
  "'ordered'",
  "'p'",
  "'prop'",
  "'property'",
  "'proximity'",
  "'unordered'",
  "'val'",
  "'value'",
  "'weight'",
  "'wgs84'"
);

(:~
 : Match next token in input string, starting at given index, using
 : the DFA entry state for the set of tokens that are expected in
 : the current context.
 :
 : @param $input the input string.
 : @param $begin the index where to start in input string.
 : @param $token-set the expected token set id.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:match($input as xs:string,
                         $begin as xs:integer,
                         $token-set as xs:integer) as xs:integer+
{
  let $result := $p:INITIAL[1 + $token-set]
  return p:transition($input,
                      $begin,
                      $begin,
                      $begin,
                      $result,
                      $result mod 512,
                      0)
};

(:~
 : The DFA state transition function. If we are in a valid DFA state, save
 : it's result annotation, consume one input codepoint, calculate the next
 : state, and use tail recursion to do the same again. Otherwise, return
 : any valid result or a negative DFA state id in case of an error.
 :
 : @param $input the input string.
 : @param $begin the begin index of the current token in the input string.
 : @param $current the index of the current position in the input string.
 : @param $end the end index of the result in the input string.
 : @param $result the result code.
 : @param $current-state the current DFA state.
 : @param $previous-state the  previous DFA state.
 : @return a sequence of three: the token code of the result token,
 : with input string begin and end positions. If there is no valid
 : token, return the negative id of the DFA state that failed, along
 : with begin and end positions of the longest viable prefix.
 :)
declare function p:transition($input as xs:string,
                              $begin as xs:integer,
                              $current as xs:integer,
                              $end as xs:integer,
                              $result as xs:integer,
                              $current-state as xs:integer,
                              $previous-state as xs:integer) as xs:integer+
{
  if ($current-state = 0) then
    let $result := $result idiv 512
    return
      if ($result != 0) then
      (
        $result - 1,
        $begin,
        $end
      )
      else
      (
        - $previous-state,
        $begin,
        $current - 1
      )
  else
    let $c0 := (string-to-codepoints(substring($input, $current, 1)), 0)[1]
    let $c1 :=
      if ($c0 < 128) then
        $p:MAP0[1 + $c0]
      else if ($c0 < 55296) then
        let $c1 := $c0 idiv 32
        let $c2 := $c1 idiv 32
        return $p:MAP1[1 + $c0 mod 32 + $p:MAP1[1 + $c1 mod 32 + $p:MAP1[1 + $c2]]]
      else
        p:map2($c0, 1, 1)
    let $current := $current + 1
    let $i0 := 512 * $c1 + $current-state - 1
    let $i1 := $i0 idiv 16
    let $next-state := $p:TRANSITION[$i0 mod 16 + $p:TRANSITION[$i1 + 1] + 1]
    return
      if ($next-state > 511) then
        p:transition($input, $begin, $current, $current, $next-state, $next-state mod 512, $current-state)
      else
        p:transition($input, $begin, $current, $end, $result, $next-state, $current-state)
};

(:~
 : Recursively translate one 32-bit chunk of an expected token bitset
 : to the corresponding sequence of token strings.
 :
 : @param $result the result of previous recursion levels.
 : @param $chunk the 32-bit chunk of the expected token bitset.
 : @param $base-token-code the token code of bit 0 in the current chunk.
 : @return the set of token strings.
 :)
declare function p:token($result as xs:string*,
                         $chunk as xs:integer,
                         $base-token-code as xs:integer) as xs:string*
{
  if ($chunk = 0) then
    $result
  else
    p:token
    (
      ($result, if ($chunk mod 2 != 0) then $p:TOKEN[$base-token-code] else ()),
      if ($chunk < 0) then $chunk idiv 2 + 2147483648 else $chunk idiv 2,
      $base-token-code + 1
    )
};

(:~
 : Calculate expected token set for a given DFA state as a sequence
 : of strings.
 :
 : @param $state the DFA state.
 : @return the set of token strings
 :)
declare function p:expected-token-set($state as xs:integer) as xs:string*
{
  if ($state > 0) then
    for $t in 0 to 2
    let $i0 := $t * 343 + $state - 1
    let $i1 := $i0 idiv 4
    return p:token((), $p:EXPECTED[$i0 mod 4 + $p:EXPECTED[$i1 + 1] + 1], $t * 32 + 1)
  else
    ()
};

(:~
 : Classify codepoint by doing a tail recursive binary search for a
 : matching codepoint range entry in MAP2, the codepoint to charclass
 : map for codepoints above the surrogate block.
 :
 : @param $c the codepoint.
 : @param $lo the binary search lower bound map index.
 : @param $hi the binary search upper bound map index.
 : @return the character class.
 :)
declare function p:map2($c as xs:integer, $lo as xs:integer, $hi as xs:integer) as xs:integer
{
  if ($lo > $hi) then
    0
  else
    let $m := ($hi + $lo) idiv 2
    return
      if ($p:MAP2[$m] > $c) then
        p:map2($c, $lo, $m - 1)
      else if ($p:MAP2[1 + $m] < $c) then
        p:map2($c, $m + 1, $hi)
      else
        $p:MAP2[2 + $m]
};

(:~
 : Parse rangeOperator.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-rangeOperator($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 50) then                            (: 'ge' :)
      let $state := p:shift(50, $input, $state)             (: 'ge' :)
      return $state
    else if ($state[$p:l1] = 53) then                       (: 'gt' :)
      let $state := p:shift(53, $input, $state)             (: 'gt' :)
      return $state
    else if ($state[$p:l1] = 56) then                       (: 'le' :)
      let $state := p:shift(56, $input, $state)             (: 'le' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(57, $input, $state)             (: 'lt' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "rangeOperator", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production rangeExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-rangeExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(29, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-tokenExpr($input, $state)
        return p:parse-rangeExpr-1($input, $state)
};

(:~
 : Parse rangeExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-rangeExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(27, $input, $state)           (: SP | 'ge' | 'gt' | 'le' | 'lt' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-rangeOperator($input, $state)
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:parse-rangeExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "rangeExpr", $count, $begin, $end)
};

(:~
 : Parse geoParams.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-geoParams($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(40, $input, $state)                 (: 'coordinate-system' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shift(15, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(13, $input, $state)           (: SP | 'wgs84' :)
  let $state := p:shift(77, $input, $state)                 (: 'wgs84' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "geoParams", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production geometryCollectionExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-geometryCollectionExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(31, $input, $state)     (: SP | 'LINESTRING' | 'LS' | 'MLS' | 'MP' | 'MPG' |
                                                               'MULTILINESTRING' | 'MULTIPOINT' | 'MULTIPOLYGON' |
                                                               'PG' | 'POINT' | 'POLYGON' | 'PT' :)
        let $state :=
          if ($state[$p:l1] = 27                            (: 'POINT' :)
           or $state[$p:l1] = 29) then                      (: 'PT' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-pointExpr($input, $state)
            return $state
          else if ($state[$p:l1] = 21                       (: 'MP' :)
                or $state[$p:l1] = 24) then                 (: 'MULTIPOINT' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-multiPointExpr($input, $state)
            return $state
          else if ($state[$p:l1] = 18                       (: 'LINESTRING' :)
                or $state[$p:l1] = 19) then                 (: 'LS' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-lineStringExpr($input, $state)
            return $state
          else if ($state[$p:l1] = 20                       (: 'MLS' :)
                or $state[$p:l1] = 23) then                 (: 'MULTILINESTRING' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-multiLineStringExpr($input, $state)
            return $state
          else if ($state[$p:l1] = 26                       (: 'PG' :)
                or $state[$p:l1] = 28) then                 (: 'POLYGON' :)
            let $state := p:whitespace($input, $state)
            let $state := p:parse-polygonExpr($input, $state)
            return $state
          else if ($state[$p:error]) then
            $state
          else
            let $state := p:whitespace($input, $state)
            let $state := p:parse-multiPolygonExpr($input, $state)
            return $state
        return p:parse-geometryCollectionExpr-1($input, $state)
};

(:~
 : Parse geometryCollectionExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-geometryCollectionExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 17) then                            (: 'GEOMETRYCOLLECTION' :)
      let $state := p:shift(17, $input, $state)             (: 'GEOMETRYCOLLECTION' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(16, $input, $state)             (: 'GC' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:parse-geometryCollectionExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "geometryCollectionExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production multiPolygonExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-multiPolygonExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(0, $input, $state)      (: SP | polygonValue :)
        let $state := p:shift(2, $input, $state)            (: polygonValue :)
        return p:parse-multiPolygonExpr-1($input, $state)
};

(:~
 : Parse multiPolygonExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-multiPolygonExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 25) then                            (: 'MULTIPOLYGON' :)
      let $state := p:shift(25, $input, $state)             (: 'MULTIPOLYGON' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(22, $input, $state)             (: 'MPG' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(0, $input, $state)            (: SP | polygonValue :)
  let $state := p:shift(2, $input, $state)                  (: polygonValue :)
  let $state := p:parse-multiPolygonExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "multiPolygonExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production polygonExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-polygonExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(0, $input, $state)      (: SP | polygonValue :)
        let $state := p:shift(2, $input, $state)            (: polygonValue :)
        return p:parse-polygonExpr-1($input, $state)
};

(:~
 : Parse polygonExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-polygonExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 28) then                            (: 'POLYGON' :)
      let $state := p:shift(28, $input, $state)             (: 'POLYGON' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(26, $input, $state)             (: 'PG' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(0, $input, $state)            (: SP | polygonValue :)
  let $state := p:shift(2, $input, $state)                  (: polygonValue :)
  let $state := p:parse-polygonExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "polygonExpr", $count, $begin, $end)
};

(:~
 : Parse multiLineStringExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-multiLineStringExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 23) then                            (: 'MULTILINESTRING' :)
      let $state := p:shift(23, $input, $state)             (: 'MULTILINESTRING' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(20, $input, $state)             (: 'MLS' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "multiLineStringExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production lineStringExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-lineStringExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(1, $input, $state)      (: SP | pointValue :)
        let $state := p:shift(3, $input, $state)            (: pointValue :)
        return p:parse-lineStringExpr-1($input, $state)
};

(:~
 : Parse lineStringExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-lineStringExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 18) then                            (: 'LINESTRING' :)
      let $state := p:shift(18, $input, $state)             (: 'LINESTRING' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(19, $input, $state)             (: 'LS' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(1, $input, $state)            (: SP | pointValue :)
  let $state := p:shift(3, $input, $state)                  (: pointValue :)
  let $state := p:parse-lineStringExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "lineStringExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production multiPointExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-multiPointExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(1, $input, $state)      (: SP | pointValue :)
        let $state := p:shift(3, $input, $state)            (: pointValue :)
        return p:parse-multiPointExpr-1($input, $state)
};

(:~
 : Parse multiPointExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-multiPointExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 24) then                            (: 'MULTIPOINT' :)
      let $state := p:shift(24, $input, $state)             (: 'MULTIPOINT' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(21, $input, $state)             (: 'MP' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(1, $input, $state)            (: SP | pointValue :)
  let $state := p:shift(3, $input, $state)                  (: pointValue :)
  let $state := p:parse-multiPointExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "multiPointExpr", $count, $begin, $end)
};

(:~
 : Parse pointExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-pointExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 27) then                            (: 'POINT' :)
      let $state := p:shift(27, $input, $state)             (: 'POINT' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(29, $input, $state)             (: 'PT' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(1, $input, $state)            (: SP | pointValue :)
  let $state := p:shift(3, $input, $state)                  (: pointValue :)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "pointExpr", $count, $begin, $end)
};

(:~
 : Parse regionValue.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-regionValue($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 27                                  (: 'POINT' :)
     or $state[$p:l1] = 29) then                            (: 'PT' :)
      let $state := p:parse-pointExpr($input, $state)
      return $state
    else if ($state[$p:l1] = 21                             (: 'MP' :)
          or $state[$p:l1] = 24) then                       (: 'MULTIPOINT' :)
      let $state := p:parse-multiPointExpr($input, $state)
      return $state
    else if ($state[$p:l1] = 18                             (: 'LINESTRING' :)
          or $state[$p:l1] = 19) then                       (: 'LS' :)
      let $state := p:parse-lineStringExpr($input, $state)
      return $state
    else if ($state[$p:l1] = 20                             (: 'MLS' :)
          or $state[$p:l1] = 23) then                       (: 'MULTILINESTRING' :)
      let $state := p:parse-multiLineStringExpr($input, $state)
      return $state
    else if ($state[$p:l1] = 26                             (: 'PG' :)
          or $state[$p:l1] = 28) then                       (: 'POLYGON' :)
      let $state := p:parse-polygonExpr($input, $state)
      return $state
    else if ($state[$p:l1] = 22                             (: 'MPG' :)
          or $state[$p:l1] = 25) then                       (: 'MULTIPOLYGON' :)
      let $state := p:parse-multiPolygonExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-geometryCollectionExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "regionValue", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production geospatialExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-geospatialExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(10, $input, $state)     (: SP | 'coordinate-system' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-geoParams($input, $state)
        return p:parse-geospatialExpr-1($input, $state)
};

(:~
 : Parse geospatialExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-geospatialExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(19, $input, $state)           (: SP | 'geo' | 'geospatial' :)
  let $state :=
    if ($state[$p:l1] = 51) then                            (: 'geo' :)
      let $state := p:shift(51, $input, $state)             (: 'geo' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(52, $input, $state)             (: 'geospatial' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(32, $input, $state)           (: SP | 'GC' | 'GEOMETRYCOLLECTION' | 'LINESTRING' | 'LS' |
                                                               'MLS' | 'MP' | 'MPG' | 'MULTILINESTRING' | 'MULTIPOINT' |
                                                               'MULTIPOLYGON' | 'PG' | 'POINT' | 'POLYGON' | 'PT' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-regionValue($input, $state)
  let $state := p:parse-geospatialExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "geospatialExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production collectionExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-collectionExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(2, $input, $state)      (: SP | stringValue :)
        let $state := p:shift(5, $input, $state)            (: stringValue :)
        return p:parse-collectionExpr-1($input, $state)
};

(:~
 : Parse collectionExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-collectionExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 36) then                            (: 'coll' :)
      let $state := p:shift(36, $input, $state)             (: 'coll' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(38, $input, $state)             (: 'collection' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(2, $input, $state)            (: SP | stringValue :)
  let $state := p:shift(5, $input, $state)                  (: stringValue :)
  let $state := p:parse-collectionExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "collectionExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production documentExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-documentExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(2, $input, $state)      (: SP | stringValue :)
        let $state := p:shift(5, $input, $state)            (: stringValue :)
        return p:parse-documentExpr-1($input, $state)
};

(:~
 : Parse documentExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-documentExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 43) then                            (: 'doc' :)
      let $state := p:shift(43, $input, $state)             (: 'doc' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(44, $input, $state)             (: 'document' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(2, $input, $state)            (: SP | stringValue :)
  let $state := p:shift(5, $input, $state)                  (: stringValue :)
  let $state := p:parse-documentExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "documentExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production depthParam (one or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-depthParam-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:shift(10, $input, $state)               (: DIGIT :)
    let $state := p:lookahead1W(25, $input, $state)         (: SP | DIGIT | ')' | ',' :)
    return
      if ($state[$p:l1] != 10) then                         (: DIGIT :)
        $state
      else
        p:parse-depthParam-1($input, $state)
};

(:~
 : Parse depthParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-depthParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 55) then                            (: 'infinity' :)
      let $state := p:shift(55, $input, $state)             (: 'infinity' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-depthParam-1($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "depthParam", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production dirExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-dirExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    let $state :=
      if ($state[$p:l1] = 14) then                          (: ',' :)
        let $state := p:lookahead2W(24, $input, $state)     (: SP | stringValue | DIGIT | 'infinity' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 654) then                        (: ',' stringValue :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(2, $input, $state)      (: SP | stringValue :)
        let $state := p:shift(5, $input, $state)            (: stringValue :)
        return p:parse-dirExpr-1($input, $state)
};

(:~
 : Parse the 2nd loop of production dirExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-dirExpr-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(14, $input, $state)     (: SP | DIGIT | 'infinity' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-depthParam($input, $state)
        return p:parse-dirExpr-2($input, $state)
};

(:~
 : Parse dirExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-dirExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 41) then                            (: 'dir' :)
      let $state := p:shift(41, $input, $state)             (: 'dir' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(42, $input, $state)             (: 'directory' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(2, $input, $state)            (: SP | stringValue :)
  let $state := p:shift(5, $input, $state)                  (: stringValue :)
  let $state := p:parse-dirExpr-1($input, $state)
  let $state := p:parse-dirExpr-2($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "dirExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production valueExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-valueExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(29, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-tokenExpr($input, $state)
        return p:parse-valueExpr-1($input, $state)
};

(:~
 : Parse valueExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-valueExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(23, $input, $state)           (: SP | 'val' | 'value' :)
  let $state :=
    if ($state[$p:l1] = 74) then                            (: 'val' :)
      let $state := p:shift(74, $input, $state)             (: 'val' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(75, $input, $state)             (: 'value' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:parse-valueExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "valueExpr", $count, $begin, $end)
};

(:~
 : Parse containsExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-containsExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(17, $input, $state)           (: SP | 'cn' | 'contains' :)
  let $state :=
    if ($state[$p:l1] = 35) then                            (: 'cn' :)
      let $state := p:shift(35, $input, $state)             (: 'cn' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(39, $input, $state)             (: 'contains' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: SP | ',' :)
  let $state := p:shift(14, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "containsExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production matchExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-matchExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(29, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-tokenExpr($input, $state)
        return p:parse-matchExpr-1($input, $state)
};

(:~
 : Parse matchExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-matchExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(20, $input, $state)           (: SP | 'ma' | 'matches' :)
  let $state :=
    if ($state[$p:l1] = 58) then                            (: 'ma' :)
      let $state := p:shift(58, $input, $state)             (: 'ma' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(59, $input, $state)             (: 'matches' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:parse-matchExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "matchExpr", $count, $begin, $end)
};

(:~
 : Parse betweenParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-betweenParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(54, $input, $state)                 (: 'inclusive' :)
  let $state := p:lookahead1W(11, $input, $state)           (: SP | 'exclusive' :)
  let $state := p:shift(47, $input, $state)                 (: 'exclusive' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "betweenParam", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production betweenExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-betweenExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(12, $input, $state)     (: SP | 'inclusive' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-betweenParam($input, $state)
        return p:parse-betweenExpr-1($input, $state)
};

(:~
 : Parse betweenExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-betweenExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(16, $input, $state)           (: SP | 'between' | 'bw' :)
  let $state :=
    if ($state[$p:l1] = 34) then                            (: 'bw' :)
      let $state := p:shift(34, $input, $state)             (: 'bw' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(32, $input, $state)             (: 'between' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: SP | ',' :)
  let $state := p:shift(14, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:parse-betweenExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "betweenExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production notEqualExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-notEqualExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    let $state :=
      if ($state[$p:l1] = 14) then                          (: ',' :)
        let $state := p:lookahead2W(30, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue | 'collation' | 'maxOccurs' |
                                                               'minOccurs' | 'weight' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 654                              (: ',' stringValue :)
      and $state[$p:lk] != 782                              (: ',' floatValue :)
      and $state[$p:lk] != 910                              (: ',' intValue :)
      and $state[$p:lk] != 1038                             (: ',' dateTimeValue :)
      and $state[$p:lk] != 1166) then                       (: ',' dateValue :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(29, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-tokenExpr($input, $state)
        return p:parse-notEqualExpr-1($input, $state)
};

(:~
 : Parse the 2nd loop of production notEqualExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-notEqualExpr-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(26, $input, $state)     (: SP | 'collation' | 'maxOccurs' | 'minOccurs' | 'weight' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-equalParam($input, $state)
        return p:parse-notEqualExpr-2($input, $state)
};

(:~
 : Parse notEqualExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-notEqualExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(21, $input, $state)           (: SP | 'ne' | 'notequal' :)
  let $state :=
    if ($state[$p:l1] = 62) then                            (: 'ne' :)
      let $state := p:shift(62, $input, $state)             (: 'ne' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(65, $input, $state)             (: 'notequal' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:parse-notEqualExpr-1($input, $state)
  let $state := p:parse-notEqualExpr-2($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "notEqualExpr", $count, $begin, $end)
};

(:~
 : Parse weightParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-weightParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(76, $input, $state)                 (: 'weight' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shift(15, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(3, $input, $state)            (: SP | floatValue :)
  let $state := p:shift(6, $input, $state)                  (: floatValue :)
  let $end := $state[$p:e0]
  return p:reduce($state, "weightParam", $count, $begin, $end)
};

(:~
 : Try parsing weightParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-weightParam($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(76, $input, $state)                (: 'weight' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shiftT(15, $input, $state)                (: '=' :)
  let $state := p:lookahead1W(3, $input, $state)            (: SP | floatValue :)
  let $state := p:shiftT(6, $input, $state)                 (: floatValue :)
  return $state
};

(:~
 : Parse maxOccursParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-maxOccursParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(60, $input, $state)                 (: 'maxOccurs' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shift(15, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(4, $input, $state)            (: SP | intValue :)
  let $state := p:shift(7, $input, $state)                  (: intValue :)
  let $end := $state[$p:e0]
  return p:reduce($state, "maxOccursParam", $count, $begin, $end)
};

(:~
 : Try parsing maxOccursParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-maxOccursParam($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(60, $input, $state)                (: 'maxOccurs' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shiftT(15, $input, $state)                (: '=' :)
  let $state := p:lookahead1W(4, $input, $state)            (: SP | intValue :)
  let $state := p:shiftT(7, $input, $state)                 (: intValue :)
  return $state
};

(:~
 : Parse minOccursParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-minOccursParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(61, $input, $state)                 (: 'minOccurs' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shift(15, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(4, $input, $state)            (: SP | intValue :)
  let $state := p:shift(7, $input, $state)                  (: intValue :)
  let $end := $state[$p:e0]
  return p:reduce($state, "minOccursParam", $count, $begin, $end)
};

(:~
 : Try parsing minOccursParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-minOccursParam($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(61, $input, $state)                (: 'minOccurs' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shiftT(15, $input, $state)                (: '=' :)
  let $state := p:lookahead1W(4, $input, $state)            (: SP | intValue :)
  let $state := p:shiftT(7, $input, $state)                 (: intValue :)
  return $state
};

(:~
 : Parse collationParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-collationParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(37, $input, $state)                 (: 'collation' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shift(15, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(2, $input, $state)            (: SP | stringValue :)
  let $state := p:shift(5, $input, $state)                  (: stringValue :)
  let $end := $state[$p:e0]
  return p:reduce($state, "collationParam", $count, $begin, $end)
};

(:~
 : Try parsing collationParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-collationParam($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(37, $input, $state)                (: 'collation' :)
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shiftT(15, $input, $state)                (: '=' :)
  let $state := p:lookahead1W(2, $input, $state)            (: SP | stringValue :)
  let $state := p:shiftT(5, $input, $state)                 (: stringValue :)
  return $state
};

(:~
 : Parse equalParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-equalParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 37) then                            (: 'collation' :)
      let $state := p:parse-collationParam($input, $state)
      return $state
    else if ($state[$p:l1] = 61) then                       (: 'minOccurs' :)
      let $state := p:parse-minOccursParam($input, $state)
      return $state
    else if ($state[$p:l1] = 60) then                       (: 'maxOccurs' :)
      let $state := p:parse-maxOccursParam($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-weightParam($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "equalParam", $count, $begin, $end)
};

(:~
 : Try parsing equalParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-equalParam($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:l1] = 37) then                            (: 'collation' :)
      let $state := p:try-collationParam($input, $state)
      return $state
    else if ($state[$p:l1] = 61) then                       (: 'minOccurs' :)
      let $state := p:try-minOccursParam($input, $state)
      return $state
    else if ($state[$p:l1] = 60) then                       (: 'maxOccurs' :)
      let $state := p:try-maxOccursParam($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:try-weightParam($input, $state)
      return $state
  return $state
};

(:~
 : Parse tokenExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-tokenExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 5) then                             (: stringValue :)
      let $state := p:shift(5, $input, $state)              (: stringValue :)
      return $state
    else if ($state[$p:l1] = 7) then                        (: intValue :)
      let $state := p:shift(7, $input, $state)              (: intValue :)
      return $state
    else if ($state[$p:l1] = 6) then                        (: floatValue :)
      let $state := p:shift(6, $input, $state)              (: floatValue :)
      return $state
    else if ($state[$p:l1] = 9) then                        (: dateValue :)
      let $state := p:shift(9, $input, $state)              (: dateValue :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(8, $input, $state)              (: dateTimeValue :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "tokenExpr", $count, $begin, $end)
};

(:~
 : Try parsing tokenExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-tokenExpr($input as xs:string, $state as item()+) as item()+
{
  let $state :=
    if ($state[$p:l1] = 5) then                             (: stringValue :)
      let $state := p:shiftT(5, $input, $state)             (: stringValue :)
      return $state
    else if ($state[$p:l1] = 7) then                        (: intValue :)
      let $state := p:shiftT(7, $input, $state)             (: intValue :)
      return $state
    else if ($state[$p:l1] = 6) then                        (: floatValue :)
      let $state := p:shiftT(6, $input, $state)             (: floatValue :)
      return $state
    else if ($state[$p:l1] = 9) then                        (: dateValue :)
      let $state := p:shiftT(9, $input, $state)             (: dateValue :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shiftT(8, $input, $state)             (: dateTimeValue :)
      return $state
  return $state
};

(:~
 : Parse the 1st loop of production equalExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-equalExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    let $state :=
      if ($state[$p:l1] = 14) then                          (: ',' :)
        let $state := p:lookahead2W(30, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue | 'collation' | 'maxOccurs' |
                                                               'minOccurs' | 'weight' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 654                              (: ',' stringValue :)
      and $state[$p:lk] != 782                              (: ',' floatValue :)
      and $state[$p:lk] != 910                              (: ',' intValue :)
      and $state[$p:lk] != 1038                             (: ',' dateTimeValue :)
      and $state[$p:lk] != 1166) then                       (: ',' dateValue :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(29, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-tokenExpr($input, $state)
        return p:parse-equalExpr-1($input, $state)
};

(:~
 : Try parsing the 1st loop of production equalExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-equalExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    let $state :=
      if ($state[$p:l1] = 14) then                          (: ',' :)
        let $state := p:lookahead2W(30, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue | 'collation' | 'maxOccurs' |
                                                               'minOccurs' | 'weight' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] != 654                              (: ',' stringValue :)
      and $state[$p:lk] != 782                              (: ',' floatValue :)
      and $state[$p:lk] != 910                              (: ',' intValue :)
      and $state[$p:lk] != 1038                             (: ',' dateTimeValue :)
      and $state[$p:lk] != 1166) then                       (: ',' dateValue :)
        $state
      else
        let $state := p:shiftT(14, $input, $state)          (: ',' :)
        let $state := p:lookahead1W(29, $input, $state)     (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
        let $state := p:try-tokenExpr($input, $state)
        return p:try-equalExpr-1($input, $state)
};

(:~
 : Parse the 2nd loop of production equalExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-equalExpr-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(26, $input, $state)     (: SP | 'collation' | 'maxOccurs' | 'minOccurs' | 'weight' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-equalParam($input, $state)
        return p:parse-equalExpr-2($input, $state)
};

(:~
 : Try parsing the 2nd loop of production equalExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-equalExpr-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shiftT(14, $input, $state)          (: ',' :)
        let $state := p:lookahead1W(26, $input, $state)     (: SP | 'collation' | 'maxOccurs' | 'minOccurs' | 'weight' :)
        let $state := p:try-equalParam($input, $state)
        return p:try-equalExpr-2($input, $state)
};

(:~
 : Parse equalExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-equalExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(4, $input, $state)                  (: inExpr :)
  let $state := p:lookahead1W(18, $input, $state)           (: SP | 'eq' | 'equal' :)
  let $state :=
    if ($state[$p:l1] = 45) then                            (: 'eq' :)
      let $state := p:shift(45, $input, $state)             (: 'eq' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(46, $input, $state)             (: 'equal' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-tokenExpr($input, $state)
  let $state := p:parse-equalExpr-1($input, $state)
  let $state := p:parse-equalExpr-2($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "equalExpr", $count, $begin, $end)
};

(:~
 : Try parsing equalExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:try-equalExpr($input as xs:string, $state as item()+) as item()+
{
  let $state := p:shiftT(4, $input, $state)                 (: inExpr :)
  let $state := p:lookahead1W(18, $input, $state)           (: SP | 'eq' | 'equal' :)
  let $state :=
    if ($state[$p:l1] = 45) then                            (: 'eq' :)
      let $state := p:shiftT(45, $input, $state)            (: 'eq' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shiftT(46, $input, $state)            (: 'equal' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shiftT(12, $input, $state)                (: '(' :)
  let $state := p:lookahead1W(29, $input, $state)           (: SP | stringValue | floatValue | intValue |
                                                               dateTimeValue | dateValue :)
  let $state := p:try-tokenExpr($input, $state)
  let $state := p:try-equalExpr-1($input, $state)
  let $state := p:try-equalExpr-2($input, $state)
  let $state := p:shiftT(13, $input, $state)                (: ')' :)
  return $state
};

(:~
 : Parse propertyExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-propertyExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 70) then                            (: 'prop' :)
      let $state := p:shift(70, $input, $state)             (: 'prop' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(71, $input, $state)             (: 'property' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "propertyExpr", $count, $begin, $end)
};

(:~
 : Parse fragmentExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-fragmentExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 48) then                            (: 'frag' :)
      let $state := p:shift(48, $input, $state)             (: 'frag' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(49, $input, $state)             (: 'fragment' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "fragmentExpr", $count, $begin, $end)
};

(:~
 : Parse boostExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-boostExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(33, $input, $state)                 (: 'boost' :)
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: SP | ',' :)
  let $state := p:shift(14, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "boostExpr", $count, $begin, $end)
};

(:~
 : Parse proximityParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-proximityParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 69) then                            (: 'p' :)
      let $state := p:shift(69, $input, $state)             (: 'p' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(72, $input, $state)             (: 'proximity' :)
      return $state
  let $state := p:lookahead1W(9, $input, $state)            (: SP | '=' :)
  let $state := p:shift(15, $input, $state)                 (: '=' :)
  let $state := p:lookahead1W(4, $input, $state)            (: SP | intValue :)
  let $state := p:shift(7, $input, $state)                  (: intValue :)
  let $end := $state[$p:e0]
  return p:reduce($state, "proximityParam", $count, $begin, $end)
};

(:~
 : Parse nearParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-nearParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 69                                  (: 'p' :)
     or $state[$p:l1] = 72) then                            (: 'proximity' :)
      let $state := p:parse-proximityParam($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-orderParam($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "nearParam", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production nearExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-nearExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(28, $input, $state)     (: SP | 'ordered' | 'p' | 'proximity' | 'unordered' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-nearParam($input, $state)
        return p:parse-nearExpr-1($input, $state)
};

(:~
 : Parse nearExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-nearExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 66) then                            (: 'nr' :)
      let $state := p:shift(66, $input, $state)             (: 'nr' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(63, $input, $state)             (: 'near' :)
      return $state
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: SP | ',' :)
  let $state := p:shift(14, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:parse-nearExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "nearExpr", $count, $begin, $end)
};

(:~
 : Parse andNotExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-andNotExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(31, $input, $state)                 (: 'andnot' :)
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(8, $input, $state)            (: SP | ',' :)
  let $state := p:shift(14, $input, $state)                 (: ',' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "andNotExpr", $count, $begin, $end)
};

(:~
 : Parse notExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-notExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(64, $input, $state)                 (: 'not' :)
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(7, $input, $state)            (: SP | ')' :)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "notExpr", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production orExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-orExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(33, $input, $state)     (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-mqlExpr($input, $state)
        return p:parse-orExpr-1($input, $state)
};

(:~
 : Parse orExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-orExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(67, $input, $state)                 (: 'or' :)
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(35, $input, $state)           (: SP | inExpr | ')' | ',' | 'and' | 'andnot' | 'boost' |
                                                               'coll' | 'collection' | 'dir' | 'directory' | 'doc' |
                                                               'document' | 'frag' | 'fragment' | 'near' | 'not' |
                                                               'nr' | 'or' | 'prop' | 'property' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 13                            (: ')' :)
         and $state[$p:l1] != 14) then                      (: ',' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-mqlExpr($input, $state)
      return $state
    else
      $state
  let $state := p:parse-orExpr-1($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "orExpr", $count, $begin, $end)
};

(:~
 : Parse orderParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-orderParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 68) then                            (: 'ordered' :)
      let $state := p:shift(68, $input, $state)             (: 'ordered' :)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:shift(73, $input, $state)             (: 'unordered' :)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "orderParam", $count, $begin, $end)
};

(:~
 : Parse andParam.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-andParam($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:parse-orderParam($input, $state)
  let $end := $state[$p:e0]
  return p:reduce($state, "andParam", $count, $begin, $end)
};

(:~
 : Parse the 1st loop of production andExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-andExpr-1($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    let $state :=
      if ($state[$p:l1] = 14) then                          (: ',' :)
        let $state := p:lookahead2W(36, $input, $state)     (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'ordered' | 'prop' | 'property' | 'unordered' :)
        return $state
      else
        ($state[$p:l1], subsequence($state, $p:lk + 1))
    return
      if ($state[$p:lk] = 13                                (: ')' :)
       or $state[$p:lk] = 8718                              (: ',' 'ordered' :)
       or $state[$p:lk] = 9358) then                        (: ',' 'unordered' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(33, $input, $state)     (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-mqlExpr($input, $state)
        return p:parse-andExpr-1($input, $state)
};

(:~
 : Parse the 2nd loop of production andExpr (zero or more). Use
 : tail recursion for iteratively updating the parser state.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-andExpr-2($input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else
    let $state := p:lookahead1W(15, $input, $state)         (: SP | ')' | ',' :)
    return
      if ($state[$p:l1] != 14) then                         (: ',' :)
        $state
      else
        let $state := p:shift(14, $input, $state)           (: ',' :)
        let $state := p:lookahead1W(22, $input, $state)     (: SP | 'ordered' | 'unordered' :)
        let $state := p:whitespace($input, $state)
        let $state := p:parse-andParam($input, $state)
        return p:parse-andExpr-2($input, $state)
};

(:~
 : Parse andExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-andExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:shift(30, $input, $state)                 (: 'and' :)
  let $state := p:lookahead1W(6, $input, $state)            (: SP | '(' :)
  let $state := p:shift(12, $input, $state)                 (: '(' :)
  let $state := p:lookahead1W(35, $input, $state)           (: SP | inExpr | ')' | ',' | 'and' | 'andnot' | 'boost' |
                                                               'coll' | 'collection' | 'dir' | 'directory' | 'doc' |
                                                               'document' | 'frag' | 'fragment' | 'near' | 'not' |
                                                               'nr' | 'or' | 'prop' | 'property' :)
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:l1] != 13                            (: ')' :)
         and $state[$p:l1] != 14) then                      (: ',' :)
      let $state := p:whitespace($input, $state)
      let $state := p:parse-mqlExpr($input, $state)
      return $state
    else
      $state
  let $state := p:parse-andExpr-1($input, $state)
  let $state := p:parse-andExpr-2($input, $state)
  let $state := p:shift(13, $input, $state)                 (: ')' :)
  let $end := $state[$p:e0]
  return p:reduce($state, "andExpr", $count, $begin, $end)
};

(:~
 : Parse mqlExpr.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-mqlExpr($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state :=
    if ($state[$p:l1] = 4) then                             (: inExpr :)
      let $state := p:lookahead2W(34, $input, $state)       (: SP | 'between' | 'bw' | 'cn' | 'contains' | 'eq' |
                                                               'equal' | 'ge' | 'geo' | 'geospatial' | 'gt' | 'le' |
                                                               'lt' | 'ma' | 'matches' | 'ne' | 'notequal' | 'val' |
                                                               'value' :)
      let $state :=
        if ($state[$p:lk] = 5764                            (: inExpr 'eq' :)
         or $state[$p:lk] = 5892) then                      (: inExpr 'equal' :)
          let $state := p:lookahead3W(6, $input, $state)    (: SP | '(' :)
          return $state
        else
          $state
      return $state
    else
      ($state[$p:l1], subsequence($state, $p:lk + 1))
  let $state :=
    if ($state[$p:error]) then
      $state
    else if ($state[$p:lk] = 202372                         (: inExpr 'eq' '(' :)
          or $state[$p:lk] = 202500) then                   (: inExpr 'equal' '(' :)
      let $state := p:memoized($state, 0)
      return
        if ($state[$p:lk] != 0) then
          $state
        else
          let $backtrack := $state
          let $state := p:strip-result($state)
          let $state := p:try-equalExpr($input, $state)
          return
            if (not($state[$p:error])) then
              p:memoize($backtrack, $state, -9, 0)
            else
              p:memoize($backtrack, $state, -10, 0)
    else
      $state
  let $state :=
    if ($state[$p:lk] = 30) then                            (: 'and' :)
      let $state := p:parse-andExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 67) then                       (: 'or' :)
      let $state := p:parse-orExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 64) then                       (: 'not' :)
      let $state := p:parse-notExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 31) then                       (: 'andnot' :)
      let $state := p:parse-andNotExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 63                             (: 'near' :)
          or $state[$p:lk] = 66) then                       (: 'nr' :)
      let $state := p:parse-nearExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 33) then                       (: 'boost' :)
      let $state := p:parse-boostExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 48                             (: 'frag' :)
          or $state[$p:lk] = 49) then                       (: 'fragment' :)
      let $state := p:parse-fragmentExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 70                             (: 'prop' :)
          or $state[$p:lk] = 71) then                       (: 'property' :)
      let $state := p:parse-propertyExpr($input, $state)
      return $state
    else if ($state[$p:lk] = -9) then
      let $state := p:parse-equalExpr($input, $state)
      return $state
    else if ($state[$p:lk] = -10) then
      let $state := p:parse-equalExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 7940                           (: inExpr 'ne' :)
          or $state[$p:lk] = 8324) then                     (: inExpr 'notequal' :)
      let $state := p:parse-notEqualExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 4100                           (: inExpr 'between' :)
          or $state[$p:lk] = 4356) then                     (: inExpr 'bw' :)
      let $state := p:parse-betweenExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 7428                           (: inExpr 'ma' :)
          or $state[$p:lk] = 7556) then                     (: inExpr 'matches' :)
      let $state := p:parse-matchExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 4484                           (: inExpr 'cn' :)
          or $state[$p:lk] = 4996) then                     (: inExpr 'contains' :)
      let $state := p:parse-containsExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 9476                           (: inExpr 'val' :)
          or $state[$p:lk] = 9604) then                     (: inExpr 'value' :)
      let $state := p:parse-valueExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 41                             (: 'dir' :)
          or $state[$p:lk] = 42) then                       (: 'directory' :)
      let $state := p:parse-dirExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 43                             (: 'doc' :)
          or $state[$p:lk] = 44) then                       (: 'document' :)
      let $state := p:parse-documentExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 36                             (: 'coll' :)
          or $state[$p:lk] = 38) then                       (: 'collection' :)
      let $state := p:parse-collectionExpr($input, $state)
      return $state
    else if ($state[$p:lk] = 6532                           (: inExpr 'geo' :)
          or $state[$p:lk] = 6660) then                     (: inExpr 'geospatial' :)
      let $state := p:parse-geospatialExpr($input, $state)
      return $state
    else if ($state[$p:error]) then
      $state
    else
      let $state := p:parse-rangeExpr($input, $state)
      return $state
  let $end := $state[$p:e0]
  return p:reduce($state, "mqlExpr", $count, $begin, $end)
};

(:~
 : Parse mql.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:parse-mql($input as xs:string, $state as item()+) as item()+
{
  let $count := count($state)
  let $begin := $state[$p:e0]
  let $state := p:lookahead1W(33, $input, $state)           (: SP | inExpr | 'and' | 'andnot' | 'boost' | 'coll' |
                                                               'collection' | 'dir' | 'directory' | 'doc' | 'document' |
                                                               'frag' | 'fragment' | 'near' | 'not' | 'nr' | 'or' |
                                                               'prop' | 'property' :)
  let $state := p:whitespace($input, $state)
  let $state := p:parse-mqlExpr($input, $state)
  let $state := p:lookahead1W(5, $input, $state)            (: SP | EOF :)
  let $state := p:shift(11, $input, $state)                 (: EOF :)
  let $end := $state[$p:e0]
  return p:reduce($state, "mql", $count, $begin, $end)
};

(:~
 : Create a textual error message from a parsing error.
 :
 : @param $input the input string.
 : @param $error the parsing error descriptor.
 : @return the error message.
 :)
declare function p:error-message($input as xs:string, $error as element(error)) as xs:string
{
  let $begin := xs:integer($error/@b)
  let $context := string-to-codepoints(substring($input, 1, $begin - 1))
  let $linefeeds := index-of($context, 10)
  let $line := count($linefeeds) + 1
  let $column := ($begin - $linefeeds[last()], $begin)[1]
  return
    if ($error/@o) then
      concat
      (
        "syntax error, found ", $p:TOKEN[$error/@o + 1], "&#10;",
        "while expecting ", $p:TOKEN[$error/@x + 1], "&#10;",
        if ($error/@e = $begin) then
          ""
        else
          concat("after successfully scanning ", string($error/@e - $begin), " characters "),
        "at line ", string($line), ", column ", string($column), "&#10;",
        "...", substring($input, $begin, 32), "..."
      )
    else
      let $expected := p:expected-token-set($error/@s)
      return
        concat
        (
          "lexical analysis failed&#10;",
          "while expecting ",
          "["[exists($expected[2])],
          string-join($expected, ", "),
          "]"[exists($expected[2])],
          "&#10;",
          if ($error/@e = $begin) then
            ""
          else
            concat("after successfully scanning ", string($error/@e - $begin), " characters "),
          "at line ", string($line), ", column ", string($column), "&#10;",
          "...", substring($input, $begin, 32), "..."
        )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shift($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3),
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    where $begin ne $end
    return
      text
      {
        substring($input, $begin, $end - $begin)
      },
    let $token := $p:TOKEN[1 + $state[$p:l1]]
    let $name := if (starts-with($token, "'")) then "TOKEN" else $token
    let $begin := $state[$p:b1]
    let $end := $state[$p:e1]
    return
      element {$name}
      {
        substring($input, $begin, $end - $begin)
      }
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      if ($state[$p:e1] < $state[$p:memo]/@e) then
        $state[$p:memo]/@*
      else
      (
        attribute b {$state[$p:b1]},
        attribute e {$state[$p:e1]},
        if ($state[$p:l1] < 0) then
          attribute s {- $state[$p:l1]}
        else
          (attribute o {$state[$p:l1]}, attribute x {$code})
      )
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Shift one token, i.e. compare lookahead token 1 with expected
 : token and in case of a match, shift lookahead tokens down such that
 : l1 becomes the current token, and higher lookahead tokens move down.
 : When lookahead token 1 does not match the expected token, raise an
 : error by saving the expected token code in the error field of the
 : parser state. In contrast to p:shift, do not create any output.
 :
 : @param $code the expected token.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:shiftT($code as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:error]) then
    $state
  else if ($state[$p:l1] = $code) then
  (
    subsequence($state, $p:l1, $p:e3 - $p:l1 + 1),
    0,
    $state[$p:e3],
    subsequence($state, $p:e3)
  )
  else
  (
    subsequence($state, 1, $p:error - 1),
    element error
    {
      if ($state[$p:e1] < $state[$p:memo]/@e) then
        $state[$p:memo]/@*
      else
      (
        attribute b {$state[$p:b1]},
        attribute e {$state[$p:e1]},
        if ($state[$p:l1] < 0) then
          attribute s {- $state[$p:l1]}
        else
          (attribute o {$state[$p:l1]}, attribute x {$code})
      )
    },
    subsequence($state, $p:error + 1)
  )
};

(:~
 : Consume whitespace.
 :
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:whitespace($input as xs:string,
                              $state as item()+) as item()+
{
  if ($state[$p:e0] = $state[$p:b1]) then
    $state
  else
    let $begin := $state[$p:e0]
    let $end := $state[$p:b1]
    return
    (
      0,
      $begin,
      $end,
      subsequence($state, $p:e0 + 1),
      text
      {
        substring($input, $begin, $end - $begin)
      }
    )
};

(:~
 : Use p:match to fetch the next token, but skip any leading
 : whitespace.
 :
 : @param $input the input string.
 : @param $begin the index where to start.
 : @param $token-set the valid token set id.
 : @return a sequence of three values: the token code of the result
 : token, with input string positions of token begin and end.
 :)
declare function p:matchW($input as xs:string,
                          $begin as xs:integer,
                          $token-set as xs:integer) as xs:integer+
{
  let $match := p:match($input, $begin, $token-set)
  return
    if ($match[1] = 1) then                                 (: SP :)
      p:matchW($input, $match[3], $token-set)
    else
      $match
};

(:~
 : Lookahead one token on level 1 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:matchW($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Lookahead one token on level 2 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead2W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l2] != 0) then
      subsequence($state, $p:l2, $p:e2 - $p:l2 + 1)
    else
      p:matchW($input, $state[$p:b2], $set)
  return
  (
    $match[1] * 128 + $state[$p:l1],
    subsequence($state, $p:lk + 1, $p:l2 - $p:lk - 1),
    $match,
    0, $match[3], 0,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 3 with whitespace skipping.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead3W($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  let $match :=
    if ($state[$p:l3] != 0) then
      subsequence($state, $p:l3, $p:e3 - $p:l3 + 1)
    else
      p:matchW($input, $state[$p:b3], $set)
  return
  (
    $match[1] * 16384 + $state[$p:lk],
    subsequence($state, $p:lk + 1, $p:l3 - $p:lk - 1),
    $match,
    subsequence($state, $p:e3 + 1)
  )
};

(:~
 : Lookahead one token on level 1.
 :
 : @param $set the code of the DFA entry state for the set of valid tokens.
 : @param $input the input string.
 : @param $state the parser state.
 : @return the updated parser state.
 :)
declare function p:lookahead1($set as xs:integer, $input as xs:string, $state as item()+) as item()+
{
  if ($state[$p:l1] != 0) then
    $state
  else
    let $match := p:match($input, $state[$p:b1], $set)
    return
    (
      $match[1],
      subsequence($state, $p:lk + 1, $p:l1 - $p:lk - 1),
      $match,
      0, $match[3], 0,
      subsequence($state, $p:e2 + 1)
    )
};

(:~
 : Reduce the result stack, creating a nonterminal element. Pop
 : $count elements off the stack, wrap them in a new element
 : named $name, and push the new element.
 :
 : @param $state the parser state.
 : @param $name the name of the result node.
 : @param $count the number of child nodes.
 : @param $begin the input index where the nonterminal begins.
 : @param $end the input index where the nonterminal ends.
 : @return the updated parser state.
 :)
declare function p:reduce($state as item()+, $name as xs:string, $count as xs:integer, $begin as xs:integer, $end as xs:integer) as item()+
{
  subsequence($state, 1, $count),
  element {$name}
  {
    subsequence($state, $count + 1)
  }
};

(:~
 : Strip result from parser state, in order to avoid carrying it while
 : backtracking.
 :
 : @param $state the parser state after an alternative failed.
 : @return the updated parser state.
 :)
declare function p:strip-result($state as item()+) as item()+
{
  subsequence($state, 1, $p:memo)
};

(:~
 : Restore parser state after unsuccessfully trying an alternative,
 : merging any memoization that was collected on the way.
 :
 : @param $backtrack the parser state before backtracking started.
 : @param $state the parser state after an alternative failed.
 : @return the updated parser state.
 :)
declare function p:restore($backtrack as item()+,
                           $state as item()+) as item()+
{
  subsequence($backtrack, 1, $p:memo - 1),
  element memo{$state[$p:error]/@*, $state[$p:memo]/value}
};

(:~
 : Memoize the backtracking result that was computed at decision point
 : $i for input position $state[$p:e0].
 :
 : @param $backtrack the parser state before backtracking started.
 : @param $state the parser state after successfully trying an alternative.
 : @param $v the id of the successful alternative.
 : @param $i the decision point id.
 : @return the updated parser state.
 :)
declare function p:memoize($backtrack as item()+,
                           $state as item()+,
                           $v as xs:integer,
                           $i as xs:integer) as item()+
{
  $v,
  subsequence($backtrack, $p:lk + 1, $p:memo - $p:lk - 1),
  element memo
  {
    $state[$p:memo]/value,
    element value {attribute key {$backtrack[$p:e0] * 1 + $i}, $v}
  },
  subsequence($backtrack, $p:memo + 1)
};

(:~
 : Retrieve memoized backtracking result for decision point $i
 : and input position $state[$p:e0] into $state[$p:lk].
 :
 : @param $state the parser state.
 : @param $i the decision point id.
 : @return the updated parser state.
 :)
declare function p:memoized($state as item()+, $i as xs:integer) as item()+
{
  let $value := data($state[$p:memo]/value[@key = $state[$p:e0] * 1 + $i])
  return
  (
    if ($value) then $value else 0,
    subsequence($state, $p:lk + 1)
  )
};

(:~
 : Parse start symbol mql from given string.
 :
 : @param $s the string to be parsed.
 : @return the result as generated by parser actions.
 :)
declare function p:parse-mql($s as xs:string) as item()*
{
  let $state := p:parse-mql($s, (0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, false(), <memo/>))
  let $error := $state[$p:error]
  return
    if ($error) then
      element ERROR {$error/@*, p:error-message($s, $error)}
    else
      subsequence($state, $p:result)
};

(: End :)
        